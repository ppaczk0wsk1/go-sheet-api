// @title           Go Sheet DB API (aka Go Sh**t DB API)
// @version         1.0
// @description     Local API that stores users in Google Sheets
// @host            localhost:8081
// @BasePath        /

package main

import (
    "context"
    "fmt"
    "log"
    "net/http"
    "os"
    "time"

    "github.com/gin-gonic/gin"
    _ "gosheetdb/docs" // Swagger docs generated by swag init
    "github.com/swaggo/files"
    "github.com/swaggo/gin-swagger"

    "golang.org/x/oauth2/google"
    "google.golang.org/api/option"
    "google.golang.org/api/sheets/v4"
)

var (
    srv     *sheets.Service
    sheetID = "1n3Vt0_zLdMspL5VEzbD7SVWgK9186k-GRLv5xcjrFDc"
)

// User represents a user stored in Google Sheets
type User struct {
    ID        string `json:"id" example:"1234567890"`
    Name      string `json:"name" example:"Cyber"`
    Email     string `json:"email" example:"cyber@spreadsheet.go"`
    CreatedAt string `json:"createdAt" example:"2025-06-22T15:04:05Z"`
}

type ErrorResponse struct {
    Error string `json:"error" example:"some error message"`
}

func initSheets() {
    ctx := context.Background()
    b, err := os.ReadFile("config.json")
    if err != nil {
        log.Fatalf("Failed to read config.json: %v", err)
    }

    config, err := google.JWTConfigFromJSON(b, sheets.SpreadsheetsScope)
    if err != nil {
        log.Fatalf("Failed to parse config: %v", err)
    }

    client := config.Client(ctx)
    srv, err = sheets.NewService(ctx, option.WithHTTPClient(client))
    if err != nil {
        log.Fatalf("Failed to create Sheets client: %v", err)
    }
}

// getUsers godoc
// @Summary      Get all users
// @Description  Retrieve all users from Google Sheets
// @Tags         users
// @Produce      json
// @Success      200  {array}   User
// @Failure      500  {object}  ErrorResponse
// @Router       /users [get]
func getUsers(c *gin.Context) {
    resp, err := srv.Spreadsheets.Values.Get(sheetID, "Users!A2:D").Do()
    if err != nil {
        c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
        return
    }

    var users []User
    for _, row := range resp.Values {
	if len(row) < 4 {
            continue
        }
        user := User{
            ID:        fmt.Sprintf("%v", row[0]),
            Name:      fmt.Sprintf("%v", row[1]),
            Email:     fmt.Sprintf("%v", row[2]),
            CreatedAt: fmt.Sprintf("%v", row[3]),
        }
        users = append(users, user)
    }

    c.JSON(http.StatusOK, users)
}

// addUser godoc
// @Summary      Add a new user
// @Description  Append a new user to Google Sheets
// @Tags         users
// @Accept       json
// @Produce      json
// @Param        user  body      User  true  "User to add"
// @Success      201   {object}  User
// @Failure      400   {object}  ErrorResponse
// @Failure      500   {object}  ErrorResponse
// @Router       /users [post]
func addUser(c *gin.Context) {
    var u User
    if err := c.BindJSON(&u); 
    err != nil {
        c.JSON(http.StatusBadRequest, gin.H{"error": "Bad JSON"})
        return
    }

    u.ID = fmt.Sprintf("%d", time.Now().UnixNano())
    u.CreatedAt = time.Now().Format(time.RFC3339)

    v := &sheets.ValueRange{
        Values: [][]interface{}{
            {u.ID, u.Name, u.Email, u.CreatedAt},
        },
    }

    _, err := srv.Spreadsheets.Values.Append(sheetID, "Users!A:D", v).ValueInputOption("RAW").Do()
    if err != nil {
        c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
        return
    }

    c.JSON(http.StatusCreated, u)
}

func main() {
    initSheets()

    r := gin.Default()

    // Swagger UI at /swagger/index.html
    r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

    // API routes
    r.GET("/users", getUsers)
    r.POST("/users", addUser)

    port := os.Getenv("PORT")
    if port == "" {
        port = "8081"
    }

    r.Run(":" + port)
}

